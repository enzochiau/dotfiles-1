# ------------------------------------
# Functions
# ------------------------------------

# excuting after change directry
chpwd() {
    ls_abbrev
    show_git_status
}


# ls which doesn't show too much file
ls_abbrev() {
    # -C : Force multi-column output.
    # -F : Append indicator (one of */=>@|) to entries.
    local cmd_ls='ls'
    local -a opt_ls
    opt_ls=('-CF' '--color=always')
    case "${OSTYPE}" in
        freebsd*|darwin*)
            if type gls > /dev/null 2>&1; then
                cmd_ls='gls'
            else
                # -G : Enable colorized output.
                opt_ls=('-aCFG')
            fi
            ;;
    esac

    local ls_result
    ls_result=$(CLICOLOR_FORCE=1 COLUMNS=$COLUMNS command $cmd_ls ${opt_ls[@]} | sed $'/^\e\[[0-9;]*m$/d')

    local ls_lines=$(echo "$ls_result" | wc -l | tr -d ' ')

    if [ $ls_lines -gt 5 ]; then
        echo "$ls_result" | head -n 3
    else
        echo "$ls_result"
    fi
}

function show_git_status() {
    if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
        echo
        git status -sb
    fi
    return 0
}

function do_enter() {
    if [ -n "$BUFFER" ]; then
        zle accept-line
        return 0
    fi
    echo
    ls_abbrev
    if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
        echo
        echo -e "\e[0;33m--- git status ---\e[0m"
        git status -sb
    fi
    zle reset-prompt
    return 0
}

zle -N do_enter
bindkey '^m' do_enter

auto_telnet() {
      local host=$1
      local user=$2
      local pass=$3

      # expect コマンドを実行
      expect -c "
      # タイムアウト値の指定
      set timeout 20
      # spawnで新しいジョブ生成
      spawn telnet -l $user $host

      # login
      expect Password:
      send \"$pass\n\"

      # spawnジョブを通常の通信にする
      interact
      "
      return 0
}

function gi() { curl http://www.gitignore.io/api/$@ ;}


function chgic() {
      mv  ~/.gitconfig.local     ~/gitconfig.local
      mv  ~/.tmp.gitconfig.local ~/.gitconfig.local
      mv  ~/gitconfig.local      ~/.tmp.gitconfig.local
      cat ~/.gitconfig.local
}


# ---------------------------------------------------
# percol
# ---------------------------------------------------
function percol_select_history() {
    local tac_cmd
    which gtac &> /dev/null && tac_cmd=gtac || tac_cmd=tac
    BUFFER=$($tac_cmd ~/.zsh_history | sed 's/^: [0-9]*:[0-9]*;//' | percol --match-method regex --query "$LBUFFER")
    CURSOR=$#BUFFER         # move cursor
    zle -R -c               # refresh
}

zle -N percol_select_history
bindkey '^R' percol_select_history

function percol-src () {
    local selected_dir=$(ghq list --full-path | percol --query "$LBUFFER")
    if [ -n "$selected_dir" ]; then
        BUFFER="cd ${selected_dir}"
        zle accept-line
    fi
    zle clear-screen
}

zle -N percol-src
bindkey '^S' percol-src

function percol-doc () {
    local selected_dir=$(ghq list --full-path | percol --query "$LBUFFER")
    if [ -n "$selected_dir" ]; then
        BUFFER="docc ${selected_dir}"
        zle accept-line
    fi
    zle clear-screen
}

zle -N percol-doc
bindkey '^O' percol-doc

function percol-jump () {
    local jump_dir=$(j | cut -d'/' -f2-| percol --query "$LBUFFER")
    if [ -n "$jump_dir" ]; then
        BUFFER="cd /${jump_dir}"
        zle accept-line
    fi
    zle clear-screen
}

zle -N percol-jump
bindkey '^J' percol-jump

function percol-git-recent-all-branches () {
    local selected_branch=$(git for-each-ref --format='%(refname)' --sort=-committerdate refs/heads refs/remotes | \
        perl -pne 's{^refs/(heads|remotes)/}{}' | \
        percol --query "$LBUFFER")
    if [ -n "$selected_branch" ]; then
        BUFFER="git checkout -t ${selected_branch}"
        zle accept-line
    fi
    zle clear-screen
}

zle -N percol-git-recent-all-branches
bindkey '^B' percol-git-recent-all-branches
